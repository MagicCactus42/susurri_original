@page "/dm"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject ISusurriDbContext Context
@inject IOptions<AuthOptions> Options
@inject ILogger<DirectMessages> Logger
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using Susurri.Core.Abstractions
@using Susurri.Core.Entities
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options
@using Susurri.Core.Exceptions
@using Susurri.Infrastructure.Auth
@using System.Net.Http.Headers
@using Susurri.Core.DTO
@implements IAsyncDisposable

<h3>DirectMessages</h3>

<div>
    <input @bind="_recipientUsername" placeholder="Recipient Username" />
    <input @bind="_message" placeholder="Message" />
    <button @onclick="SendMessage">Send</button>
</div>

@code {
    #nullable enable
    private HubConnection? _hubConnection;
    private string? _recipientUsername, _message, _senderUsername;
    private readonly List<string> messages = new();
    private bool _isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        if (Options == null || Options.Value == null)
        {
            throw new NullOptionsException();
        }

        _senderUsername = Options.Value.UniqueName;
        await LoadMessagesFromDatabase();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var accessToken = await LocalStorage.GetItemAsync<JwtDto>("token");
            if (accessToken == null)
            {
                throw new EmptyJWTException();
            }
            Logger.LogInformation("JWT retrieved successfully: {AccessToken}", accessToken.AccessToken);

            var httpClient = new HttpClient();
            httpClient.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", accessToken.AccessToken);

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/chathub")).Build();

            _hubConnection.On<string, string, string>("ReceiveMessage", async (senderUsername, recipientUsername, message) =>
            {
                messages.Add($"{senderUsername} to {recipientUsername}: {message}");
                await InvokeAsync(StateHasChanged);
                var dbMessage = new ChatMessage() { SenderUsername = senderUsername, RecipientUsername = recipientUsername, Content = message };
                Context.ChatMessages.Add(dbMessage);
                await Context.SaveChangesAsync();
            });

            await _hubConnection.StartAsync();
            _isInitialized = true;
            StateHasChanged();
        }
    }

    private async Task LoadMessagesFromDatabase()
    {
        var dbMessages = await Context.ChatMessages.ToListAsync();
        foreach (var msg in dbMessages)
        {
            var encodedMsg = $"{msg.SenderUsername} to {msg.RecipientUsername}: {msg.Content}";
            messages.Add(encodedMsg);
        }
    }

    private async Task SendMessage()
    {
        if (IsConnected && !string.IsNullOrEmpty(_senderUsername) && !string.IsNullOrEmpty(_recipientUsername) && !string.IsNullOrEmpty(_message))
        {
            if (_hubConnection is not null)
                await _hubConnection.SendAsync("SendMessage", _senderUsername, _recipientUsername, _message);
            _message = string.Empty;
        }
    }

    private bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
            await _hubConnection.DisposeAsync();
    }
}

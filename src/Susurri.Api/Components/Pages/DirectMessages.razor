@page "/dm"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject ISusurriDbContext Context
@inject IOptions<AuthOptions> Options
@inject ILocalStorageService LocalStorage
@inject UserController UserController
@inject ILogger<DirectMessages> Logger
@using Susurri.Core.Abstractions
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options
@using Susurri.Infrastructure.Auth
@using Susurri.Api.Commands
@using Susurri.Api.Controllers
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers
@using Microsoft.IdentityModel.Tokens
@implements IAsyncDisposable

<EditForm Model="@_loginModel" OnValidSubmit="OnValidLoginSubmit" FormName="">
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name" HelperText="Max. 16 characters"
                                  @bind-Value="_loginModel.Username" For="@(() => _loginModel.Username)"/>
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="_loginModel.Password" For="@(() => _loginModel.Password)" InputType="InputType.Password"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (_successLogin)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

<MudPaper Class="pa-4 mud-height-full">
    <MudGrid>
        <MudItem xs="12">
            <MudTextField Label="Recipient username" @bind-Value="_recipientUsername"/>
        </MudItem>
        <MudItem xs="12">
            <MudTextField Label="Message" @bind-Value="_message" Lines="1" MaxLines="5"/>
        </MudItem>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="SendMessage">
                Send Direct Message
            </MudButton>
        </MudItem>
        <MudItem xs="12">
            @if (!string.IsNullOrEmpty(_debugMessage))
            {
                <MudAlert Severity="Severity.Info">@_debugMessage</MudAlert>
            }
        </MudItem>
    </MudGrid>
</MudPaper>

<MudPaper Class="pa-4 mud-height-full">
    <MudText Typo="Typo.h4">Private Messages</MudText>
    <MudList>
        @foreach (var message in _messages)
        {
            <MudListItem>@message</MudListItem>
        }
    </MudList>
</MudPaper>

@code {
    #nullable enable
    private HubConnection? _hubConnection;
    private string? _recipientUsername, _message;
    private readonly List<string> _messages = new();
    private bool _isInitialized;
    readonly LoginAccountForm _loginModel = new();
    private bool _successLogin;
    private bool _loggedIn;
    private string? _debugMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _loggedIn)
        {
            try
            {
                // Load messages from the database
                await LoadMessagesFromDatabase();

                // Retrieve the JWT token from local storage
                var token = await LocalStorage.GetItemAsync<string>("token");

                if (token is null)
                {
                    Logger.LogWarning("JWT token is null. Cannot establish SignalR connection.");
                    return;
                }

                var httpClient = new HttpClient();
                httpClient.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", token);
                
                // Create a new SignalR hub connection
                _hubConnection = new HubConnectionBuilder()
                    .WithUrl(Navigation.ToAbsoluteUri("/chatHub"))
                    .Build();

                // Handle incoming messages
                _hubConnection.On<string, string, string>("ReceiveMessage", (sender, recipient, message) =>
                {
                    var encodedMsg = $"{sender} to {recipient}: {message}";
                    _messages.Add(encodedMsg);
                    InvokeAsync(StateHasChanged);
                });

                // Start the connection
                await _hubConnection.StartAsync();

                _isInitialized = true;
                Logger.LogInformation("SignalR connection established successfully.");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error initializing SignalR connection.");
            }
        }
    }
    
    private async Task LoadMessagesFromDatabase()
    {
        try
        {
            var dbMessages = await Context.ChatMessages.ToListAsync();
            _messages.Clear();
            if (_recipientUsername.IsNullOrEmpty())
                return; 
            foreach (var msg in dbMessages)
            {
                    var encodedMsg = $"{msg.SenderUsername} to {msg.RecipientUsername}: {msg.Content}";
                    _messages.Add(encodedMsg);
            }
            Logger.LogInformation("Messages loaded from database successfully.");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading messages from database.");
        }
    }

    private async Task SendMessage()
    {
        if (_hubConnection is null)
        {
            Logger.LogWarning("Hub connection is null. Cannot send message.");
            return;
        }

        var senderUsername = Options?.Value.UniqueName;

        if (IsConnected && !string.IsNullOrEmpty(senderUsername) && !string.IsNullOrEmpty(_recipientUsername) && !string.IsNullOrEmpty(_message))
        {
            try
            {
                await _hubConnection.InvokeAsync("SendMessage", senderUsername, _recipientUsername, _message);

                // Clear the message box after sending
                _message = string.Empty;
                Logger.LogInformation("Message sent successfully.");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error sending message.");
            }
        }
    }

    private bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    public class LoginAccountForm
    {
        [Required]
        [StringLength(16, ErrorMessage = "Name length can't be more than 16.")]
        public string? Username { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string? Password { get; set; }
    }

    private async Task OnValidLoginSubmit(EditContext context)
    {
        var command = new SignIn(_loginModel.Username, _loginModel.Password);
        _successLogin = true;
        var token = await UserController.Post(command);
        await LocalStorage.SetItemAsync("token", token);
        _loggedIn = true;
        Logger.LogInformation("User logged in successfully.");
        StateHasChanged();
    }
}

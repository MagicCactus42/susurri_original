@page "/dm"
@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation
@using Susurri.Core.Abstractions
@using Susurri.Core.Entities
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options
@using Susurri.Infrastructure.Auth
@implements IAsyncDisposable
@inject ISusurriDbContext Context
<h3>DirectMessages</h3>

<div>
    <input @bind="recipientUsername" placeholder="Recipient Username" />
    <input @bind="message" placeholder="Message" />
    <button @onclick="SendMessage">Send</button>
</div>

@code {
    private HubConnection? _hubConnection;
    private readonly ChatMessage _message;
    private string? recipientUsername, message, senderUsername;
    private readonly List<string> messages = new();
    private readonly IOptions<AuthOptions> options;
    
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder().WithUrl(Navigation.ToAbsoluteUri("/chathub")).Build();
        
        _hubConnection.On<string, string, string>("RecieveMessage", async (senderUsername, recipientUsername, message) =>
        {
            senderUsername = options.Value.Issuer;
            messages.Add($"{senderUsername} to {recipientUsername}: {message}");
            await InvokeAsync(StateHasChanged);
            var dbMessage = new ChatMessage() { SenderUsername = senderUsername, RecipientUsername = recipientUsername, Content = message };
            Context.ChatMessages.Add(dbMessage);
            await Context.SaveChangesAsync();
        });
        await LoadMessagesFromDatabase();
        await _hubConnection.StartAsync();
    }

    private async Task LoadMessagesFromDatabase()
    {
        var dbMessages = await Context.ChatMessages.ToListAsync();
        foreach (var msg in dbMessages)
        {
            var encodedMsg = $"{msg.SenderUsername} to {msg.RecipientUsername}: {msg.Content}";
            messages.Add(encodedMsg);
        }
    }
    
    private async Task SendMessage()
    {
        if (IsConnected && !string.IsNullOrEmpty(senderUsername) && !string.IsNullOrEmpty(recipientUsername) && !string.IsNullOrEmpty(message))
        {
            await _hubConnection.SendAsync("SendMessage", senderUsername, recipientUsername, message);
            message = string.Empty;
        }
    }

    private bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;
    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
            await _hubConnection.DisposeAsync();
    }
}
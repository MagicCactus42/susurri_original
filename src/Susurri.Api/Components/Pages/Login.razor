@page "/login"

@using System.ComponentModel.DataAnnotations
@using Susurri.Api.Commands
@using Susurri.Api.Controllers
@using Susurri.Application.Abstractions
@using Susurri.Core.Abstractions
@using Susurri.Core.Models
@inject IUserService UserService
@inject UserController UserController
@rendermode InteractiveServer

<EditForm Model="@_registerModel" OnValidSubmit="OnValidRegisterSubmit" FormName="">
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name" HelperText="Max. 16 characters"
                                  @bind-Value="_registerModel.Username" For="@(() => _registerModel.Username)"/>
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="_registerModel.Password" For="@(() => _registerModel.Password)" InputType="InputType.Password"/>
                    <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                  @bind-Value="_registerModel.Password2" For="@(() => _registerModel.Password2)" InputType="InputType.Password"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (_successRegister)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

<EditForm Model="@_loginModel" OnValidSubmit="OnValidLoginSubmit" FormName="">
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudCard>
            <MudCardContent>
                <MudTextField Label="First name" HelperText="Max. 16 characters"
                              @bind-Value="_loginModel.Username" For="@(() => _loginModel.Username)"/>
                <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                              @bind-Value="_loginModel.Password" For="@(() => _loginModel.Password)" InputType="InputType.Password"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
            @if (_successLogin)
            {
                <MudText Color="Color.Success">Success</MudText>
            }
            else
            {
                <MudText Color="@Color.Error">
                    <ValidationSummary />
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudText Typo="Typo.body2" Align="Align.Center">
            Fill out the form correctly to see the success message.
        </MudText>
    </MudItem>
</MudGrid>
</EditForm>


@code {
    readonly RegisterAccountForm _registerModel = new();
    readonly LoginAccountForm _loginModel = new();
    private bool _successRegister;
    private bool _successLogin;

    public class LoginAccountForm
    {
        [Required]
        [StringLength(16, ErrorMessage = "Name length can't be more than 16.")]
        public string Username { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }
    }
    public class RegisterAccountForm
    {
        [Required]
        [StringLength(16, ErrorMessage = "Name length can't be more than 16.")]
        public string Username { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }

    private async Task OnValidRegisterSubmit(EditContext context)
    {
        await UserService.SaveUser(new SignUpViewModel
        {
            Username = _registerModel.Username,
            Password = _registerModel.Password
        });
        _successRegister= true;
        StateHasChanged();
    }
    private async Task OnValidLoginSubmit(EditContext context)
    {
        var command = new SignIn(_loginModel.Username, _loginModel.Password);
        _successLogin = true;
        await UserController.Post(command);
    }
}
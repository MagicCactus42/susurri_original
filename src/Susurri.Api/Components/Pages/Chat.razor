@page "/chat"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR
@using Microsoft.EntityFrameworkCore
@using Susurri.Core.Abstractions
@using Susurri.Core.Entities
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject ISusurriDbContext Context

<PageTitle>Home</PageTitle>

<div>
    <div class="form-group">
        <label>
            User:
            <input @bind="User" />
        </label>
    </div>
    <div class="form-group">
        <label>
            Message:
            <input @bind="Message" size="50" />
        </label>
    </div>
    <div>
        <button class="btn-send-to-caller" @onclick="SendToCaller" disabled="@(!IsConnected)">|Send to Caller|</button>
        <button class="btn-send-to-group" @onclick="SendToGroup" disabled="@(!IsConnected || !IsInGroup)">|Send to Group|</button>
        <button class="btn-join-group" @onclick="JoinGroup" disabled="@(!IsConnected)">|Join Group|</button>
        <button class="btn-join-group" @onclick="LeaveGroup" disabled="@(!IsConnected || !IsInGroup)">|Leave Group|</button>
    </div>
</div>

<hr>

<div>
    <h4>Private Messages</h4>
    <ul id="messagesListCaller">
        @foreach (var message in _privateMessages)
        {
            <li>@message</li>
        }
    </ul>
</div>

<div>
    <h4>Group Messages</h4>
    <ul id="messagesListGroup">
        @foreach (var message in _groupMessages)
        {
            <li>@message</li>
        }
    </ul>
</div>

@code {
    private HubConnection _hubConnection;
    private string User { get; set; }
    private string Message { get; set; }
    private readonly List<string> _privateMessages = new();
    private readonly List<string> _groupMessages = new();
    private bool IsInGroup { get; set; }
    
    
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();
        
        _hubConnection.On<string, string>("ReceiveMessage", async (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            
            if (IsInGroup || message.Contains("has joined the group") || message.Contains("has left the group"))
            {
                _groupMessages.Add(encodedMsg);
            }
            else
            {
                _privateMessages.Add(encodedMsg);
            }
            await InvokeAsync(StateHasChanged);
            var dbMessage = new ChatMessage() { SenderUsername = user, Content = message };
            Context.ChatMessages.Add(dbMessage);
            await Context.SaveChangesAsync();
        });
        await LoadMessagesFromDatabase();
        await _hubConnection.StartAsync();
    }
    
    private async Task LoadMessagesFromDatabase()
    {
        var messages = await Context.ChatMessages.ToListAsync();
        foreach (var message in messages)
        {
            var encodedMsg = $"{message.SenderUsername}: {message.Content}";
            if (IsInGroup)
            {
                _groupMessages.Add(encodedMsg);
            }
            else
            {
                _privateMessages.Add(encodedMsg);
            }
        }
    }
    
    private async Task SendMessageToCaller(string user, string message)
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.InvokeAsync("SendMessageToCaller", user, message);
        }
    }

    private async Task SendMessageToGroups(string user, string message)
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.InvokeAsync("SendMessageToGroups", user, message);
        }
    }

    private async Task SendToCaller()
    {
        if (!string.IsNullOrEmpty(User) && !string.IsNullOrEmpty(Message) && !IsInGroup)
        {
            await SendMessageToCaller(User, Message);
            Message = ""; // Clear the message input field after sending
        }
    }

    private async Task SendToGroup()
    {
        if (!string.IsNullOrEmpty(User) && !string.IsNullOrEmpty(Message) && IsInGroup)
        {
            await SendMessageToGroups(User, Message);
            Message = ""; // Clear the message input field after sending
        }
    }

    private async Task JoinGroup()
    {
        if (!IsInGroup)
        {
            await AddToGroup("testGroup");
            IsInGroup = true;
        }
    }
    
    private async Task LeaveGroup()
    {
        if (IsInGroup)
        {
            await RemoveFromGroup("testGroup");
            IsInGroup = false;
        }
    }

    private async Task AddToGroup(string testGroup)
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.InvokeAsync("AddToGroup", testGroup);
        }
    }

    private async Task RemoveFromGroup(string testGroup)
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.InvokeAsync("RemoveFromGroup", testGroup);
        }
    }

    private bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
    

    public Task ThrowException()
        => throw new HubException("This error will be sent to the client!");
}